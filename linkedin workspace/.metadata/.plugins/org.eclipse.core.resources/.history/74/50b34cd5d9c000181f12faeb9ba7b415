package servlets;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.http.Part;

import dao.ProfessionalDAO;
import dao.ProfessionalDAOImpl;
import model.JobOffer;
import model.Post;
import model.Professional;
import helper.ProfessionalInfo;

/**
 * Servlet implementation class UserServlet
 */
@WebServlet(urlPatterns = {"/UserServlet", "/UserServlet/logout", "/UserServlet/login"})
public class UserServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	String folderPath = "/home/bill/Desktop/multimedia";
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public UserServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
	{
		String requestURI = request.getRequestURI();
		
		HttpSession session = request.getSession(true);
	
		Professional prof = (Professional) session.getAttribute("prof");
        if (prof != null)
        {
        	if(requestURI.endsWith("logout"))
    		{
    			if(session != null)
    			{
    			    session.removeAttribute("prof");
    			    session.invalidate();
    			}
    			response.sendRedirect("/LinkedInClone/UserServlet");
    		}
    		else
    		{
    			List<Post> posts_list = getPosts(request, response);
        		request.setAttribute("posts_list", posts_list);
        		ProfessionalDAO dao = new ProfessionalDAOImpl();
            	ProfessionalInfo profInfo = dao.refreshJobApplications(prof);
    			if(profInfo.getProf() != null)
            	{
    				session.setAttribute("prof",profInfo.getProf());
    				RequestDispatcher rd = getServletContext().getRequestDispatcher("/user/user_jobs.jsp");
    	            rd.forward(request, response);
            	}
            	else
            	{
            		response.sendRedirect("/LinkedInClone/UserServlet");
            	}
    			RequestDispatcher rd = getServletContext().getRequestDispatcher("/user/home.jsp");  
                rd.forward(request, response);
    		}
        }
        else
        {
        	request.setAttribute("error_message","");
        	RequestDispatcher rd = getServletContext().getRequestDispatcher("/index.jsp");  
            rd.forward(request, response);
        }
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
	{
		String requestURI = request.getRequestURI();
		
		if(requestURI.endsWith("login"))
		{
			ProfessionalInfo profInfo = login(request, response);
			Professional prof = profInfo.getProf();
			if (prof != null)
	        {
	             HttpSession session = request.getSession(true);       
	             session.setAttribute("prof",prof);
	             response.sendRedirect("/LinkedInClone/UserServlet");
	        }
	        else
	        {
	        	RequestDispatcher rd = getServletContext().getRequestDispatcher("/index.jsp");
	        	request.setAttribute("error_message", profInfo.getError());
	            rd.forward(request, response);
	        }
		}
	}
	
	private ProfessionalInfo login(HttpServletRequest request,
            HttpServletResponse response)
	{
	 
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        ProfessionalDAO dao = new ProfessionalDAOImpl();
        return dao.login(email,password);
    }
	
	private ProfessionalInfo createJobOffer(HttpServletRequest request,
            HttpServletResponse response) throws IOException
	{
		HttpSession session = request.getSession(true);
		Professional prof = (Professional) session.getAttribute("prof");
		ProfessionalDAO dao = new ProfessionalDAOImpl();
		
		Part filePart;
		try {
			filePart = request.getPart("image");
		} catch (ServletException e) {
			return new ProfessionalInfo(null,"couldn't save the photo");
		}
		
        String fileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString(); // MSIE fix.
        String path;
        File file = null;
        if (fileName.trim().isEmpty())
        {
        	path="lights.jpg";
        }
        else
        {
        	File multimedia = new File(folderPath);
            file = File.createTempFile(fileName, ".tmp", multimedia);
    		try (InputStream input = filePart.getInputStream()) {
                Files.copy(input, file.toPath(), StandardCopyOption.REPLACE_EXISTING);
            }
    		path = file.getName();
        }
		
		ProfessionalInfo profInfo = dao.updateJobOffers(prof);
		if(profInfo.getProf() == null) return profInfo;
		prof = profInfo.getProf();
        String jobDescription = request.getParameter("job_description");
        String jobTitle = request.getParameter("job_title");
        JobOffer job = new JobOffer();
        job.setText(jobDescription);
        job.setJobTitle(jobTitle);
        job.setPath(path);
        job.setProfessional(prof);
        prof.addJobOffers2(job);
        profInfo = dao.updateJobOffers(prof);
        if(profInfo.getProf() == null && !fileName.trim().isEmpty() && !path.equals("lights.jpg"))	file.delete();
        return profInfo;
    }
	
	private List<Post> getPosts(HttpServletRequest request,
            HttpServletResponse response)
	{
		HttpSession session = request.getSession(true);
		Professional prof = (Professional) session.getAttribute("prof");
        ProfessionalDAO dao = new ProfessionalDAOImpl();
		List<Post> posts_list = dao.list_my_jobs(prof);
        return posts_list;
    }

}
