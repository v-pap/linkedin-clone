package model;

import java.io.Serializable;
import javax.persistence.*;
import java.util.List;


/**
 * The persistent class for the posts database table.
 * 
 */
@Entity
@Table(name="posts")
@NamedQuery(name="Post.findAll", query="SELECT p FROM Post p")
public class Post implements Serializable {
	private static final long serialVersionUID = 1L;

	@Id
	@Column(name="post_id")
	private int postId;

	private Object text;

	//bi-directional many-to-one association to Comment
	@OneToMany(mappedBy="post")
	private List<Comment> comments;

	//bi-directional many-to-one association to PostPicture
	@OneToMany(mappedBy="post")
	private List<PostPicture> postPictures;

	//bi-directional many-to-one association to PostSound
	@OneToMany(mappedBy="post")
	private List<PostSound> postSounds;

	//bi-directional many-to-one association to PostVideo
	@OneToMany(mappedBy="post")
	private List<PostVideo> postVideos;

	//bi-directional many-to-many association to Professional
	@ManyToMany
	@JoinTable(
		name="likes"
		, joinColumns={
			@JoinColumn(name="post_id")
			}
		, inverseJoinColumns={
			@JoinColumn(name="id")
			}
		)
	private List<Professional> professionals;

	//bi-directional many-to-one association to Professional
	@ManyToOne
	@JoinColumn(name="id")
	private Professional professional;

	//bi-directional many-to-one association to Like
	@OneToMany(mappedBy="post")
	private List<Like> likes;

	public Post() {
	}

	public int getPostId() {
		return this.postId;
	}

	public void setPostId(int postId) {
		this.postId = postId;
	}

	public Object getText() {
		return this.text;
	}

	public void setText(Object text) {
		this.text = text;
	}

	public List<Comment> getComments() {
		return this.comments;
	}

	public void setComments(List<Comment> comments) {
		this.comments = comments;
	}

	public Comment addComment(Comment comment) {
		getComments().add(comment);
		comment.setPost(this);

		return comment;
	}

	public Comment removeComment(Comment comment) {
		getComments().remove(comment);
		comment.setPost(null);

		return comment;
	}

	public List<PostPicture> getPostPictures() {
		return this.postPictures;
	}

	public void setPostPictures(List<PostPicture> postPictures) {
		this.postPictures = postPictures;
	}

	public PostPicture addPostPicture(PostPicture postPicture) {
		getPostPictures().add(postPicture);
		postPicture.setPost(this);

		return postPicture;
	}

	public PostPicture removePostPicture(PostPicture postPicture) {
		getPostPictures().remove(postPicture);
		postPicture.setPost(null);

		return postPicture;
	}

	public List<PostSound> getPostSounds() {
		return this.postSounds;
	}

	public void setPostSounds(List<PostSound> postSounds) {
		this.postSounds = postSounds;
	}

	public PostSound addPostSound(PostSound postSound) {
		getPostSounds().add(postSound);
		postSound.setPost(this);

		return postSound;
	}

	public PostSound removePostSound(PostSound postSound) {
		getPostSounds().remove(postSound);
		postSound.setPost(null);

		return postSound;
	}

	public List<PostVideo> getPostVideos() {
		return this.postVideos;
	}

	public void setPostVideos(List<PostVideo> postVideos) {
		this.postVideos = postVideos;
	}

	public PostVideo addPostVideo(PostVideo postVideo) {
		getPostVideos().add(postVideo);
		postVideo.setPost(this);

		return postVideo;
	}

	public PostVideo removePostVideo(PostVideo postVideo) {
		getPostVideos().remove(postVideo);
		postVideo.setPost(null);

		return postVideo;
	}

	public List<Professional> getProfessionals() {
		return this.professionals;
	}

	public void setProfessionals(List<Professional> professionals) {
		this.professionals = professionals;
	}

	public Professional getProfessional() {
		return this.professional;
	}

	public void setProfessional(Professional professional) {
		this.professional = professional;
	}

	public List<Like> getLikes() {
		return this.likes;
	}

	public void setLikes(List<Like> likes) {
		this.likes = likes;
	}

	public Like addLike(Like like) {
		getLikes().add(like);
		like.setPost(this);

		return like;
	}

	public Like removeLike(Like like) {
		getLikes().remove(like);
		like.setPost(null);

		return like;
	}

}