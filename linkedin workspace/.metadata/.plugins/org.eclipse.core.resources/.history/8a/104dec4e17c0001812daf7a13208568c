package dao;

import java.io.File;
import java.util.Iterator;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import jpautils.EntityManagerHelper;
import model.Experience;
import model.JobOffer;
import model.Message;
import model.Professional;
import model.Relation;
import helper.ProfessionalInfo;

public class ProfessionalDAOImpl implements ProfessionalDAO 
{
	@Override
	public Professional find(int id) {
		EntityManager em = EntityManagerHelper.getEntityManager();
		Professional prof = em.find(Professional.class, id);
		EntityManagerHelper.closeEntityManager();
        return prof;
	}
	
	@Override
	public boolean emailExists(String email) {
		EntityManager em = EntityManagerHelper.getEntityManager();
		String qString = "SELECT p FROM Professional p WHERE p.email = :email";
        Query q = em.createQuery(qString);
        q.setParameter("email",email);
        try {
        	Professional prof;
        	prof = (Professional) q.getSingleResult();
        	if(prof == null) return false;
        } catch (Exception e) {
            return false;
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return true;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Professional> list() {
		EntityManager em = EntityManagerHelper.getEntityManager();
		Query query = em.createNamedQuery("Professional.findAll");
		List<Professional> profs;
		try {
			profs = query.getResultList();
		} catch (Exception e) {
        	return null;
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return profs;
	}

	@Override
	public void create(Professional prof) 
	{
		EntityManager em = EntityManagerHelper.getEntityManager();
		em.persist(prof);
		EntityManagerHelper.closeEntityManager();
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public ProfessionalInfo login(String email, String password) {
		EntityManager em = EntityManagerHelper.getEntityManager();
		String qString = "SELECT p FROM Professional p WHERE p.email = :email AND p.password = :password";
        Query q = em.createQuery(qString);
        q.setParameter("email",email);
        q.setParameter("password",password);
        List<Professional> results;
        try {
        	results = q.getResultList();
        } catch (Exception e) {
        	return new ProfessionalInfo(null,"DB error");
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        if(results.isEmpty())	return new ProfessionalInfo(null,"Wrong email or password");
        return new ProfessionalInfo(results.get(0),"");
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public ProfessionalInfo register(String name, String surname, String email,
			String telephone, String password, String job_title, String path)
	{
		String qString = "SELECT p FROM Professional p WHERE p.email = :email";
		EntityManager em = EntityManagerHelper.getEntityManager();
        Query q = em.createQuery(qString);
        q.setParameter("email",email);
        List<Professional> results;
        try {
        	results = q.getResultList();
        } catch (Exception e) {
        	EntityManagerHelper.closeEntityManager();
        	return new ProfessionalInfo(null,"DB error");
        }
        if(!results.isEmpty()) return new ProfessionalInfo(null,"The email is already in use");
        Professional prof = new Professional();
        prof.setEmail(email);
        prof.setPassword(password);
        prof.setName(name);
        prof.setSurname(surname);
        prof.setTelephone(telephone);
        prof.setJobTitle(job_title);
        prof.setPath(path);
        try {
        	EntityManagerHelper.beginTransaction();
            em.persist(prof); //em.merge(u); for updates
            em.getTransaction().commit();
        } catch (Exception e) {
        	return new ProfessionalInfo(null,"DB error");
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return login(email,password);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public ProfessionalInfo changeEmail(String newEmail, Professional prof)
	{
		String qString = "SELECT p FROM Professional p WHERE p.email = :email";
		EntityManager em = EntityManagerHelper.getEntityManager();
        Query q = em.createQuery(qString);
        q.setParameter("email",newEmail);
        List<Professional> results;
        try {
        	results = q.getResultList();
        } catch (Exception e) {
        	return new ProfessionalInfo(null,"DB error");
        }
        if(!results.isEmpty()) return new ProfessionalInfo(null,"The email is already in use");
        prof.setEmail(newEmail);
        try {
        	em.getTransaction().begin();
            prof = em.merge(prof);
            em.getTransaction().commit();
        } catch (Exception e) {
        	return new ProfessionalInfo(null,"DB error");
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return new ProfessionalInfo(prof,"");
	}
	
	@Override
	public ProfessionalInfo changePassword(String newPassword, Professional prof)
	{
		EntityManager em = EntityManagerHelper.getEntityManager();
        prof.setPassword(newPassword);
        try {
        	em.getTransaction().begin();
            prof = em.merge(prof);
            em.getTransaction().commit();
        } catch (Exception e) {
        	return new ProfessionalInfo(null,"DB error");
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return new ProfessionalInfo(prof,"");
	}
	
	@Override
	public ProfessionalInfo refreshProfile(Professional prof)
	{
		EntityManager em = EntityManagerHelper.getEntityManager();
        try {
        	em.getTransaction().begin();
        	prof = em.merge(prof);
        	prof.getEducations().size();
        	prof.getExperiences().size();
        	prof.getSkills().size();
        } catch (Exception e) {
        	e.printStackTrace(); 
            System.out.println(e); 
        	return new ProfessionalInfo(null,"DB error");
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return new ProfessionalInfo(prof,"");
	}
	
	@Override
	public ProfessionalInfo refreshMessages(Professional prof)
	{
		EntityManager em = EntityManagerHelper.getEntityManager();
        try {
        	em.getTransaction().begin();
        	prof = em.merge(prof);
        	prof.getMessages1().size();
        	prof.getMessages2();
        } catch (Exception e) {
        	e.printStackTrace(); 
            System.out.println(e); 
        	return new ProfessionalInfo(null,"DB error");
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return new ProfessionalInfo(prof,"");
	}
	
	@Override
	public ProfessionalInfo updateProfile(Professional prof)
	{
		EntityManager em = EntityManagerHelper.getEntityManager();
        try {
        	em.getTransaction().begin();
        	prof = em.merge(prof);
            em.getTransaction().commit();
        } catch (Exception e) {
        	e.printStackTrace(); 
            System.out.println(e); 
        	return new ProfessionalInfo(null,"DB error");
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return refreshProfile(prof);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Professional> list_connected(Professional prof) {
		EntityManager em = EntityManagerHelper.getEntityManager();
		Query query1 = em.createNamedQuery("Relation.findConnected1");
		query1.setParameter("prof",prof);
		List<Professional> profs;
		try {
			profs = query1.getResultList();
		} catch (Exception e) {
        	return null;
        }
		Query query2 = em.createNamedQuery("Relation.findConnected2");
		query2.setParameter("prof",prof);
		try {
			profs.addAll(query2.getResultList());
		} catch (Exception e) {
        	return null;
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return profs;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Professional> list_pending(Professional prof) {
		EntityManager em = EntityManagerHelper.getEntityManager();
		Query query2 = em.createNamedQuery("Relation.findPending1");
		List<Professional> profs;
		query2.setParameter("prof",prof);
		try {
			profs = query2.getResultList();
		} catch (Exception e) {
        	return null;
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return profs;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Professional> list_search(String searchName) {
		EntityManager em = EntityManagerHelper.getEntityManager();
		Query query = em.createNamedQuery("Professional.search");
		query.setParameter("search_name",searchName);
		List<Professional> profs;
		try {
			profs = query.getResultList();
		} catch (Exception e) {
        	return null;
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return profs;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public int check_status(Professional prof1, Professional prof2) {
		EntityManager em = EntityManagerHelper.getEntityManager();
		Query query = em.createNamedQuery("Relation.findStatus");
		query.setParameter("prof1",prof1);
		query.setParameter("prof2",prof2);
		List<Integer> status_list;
		try {
			status_list = query.getResultList();
		} catch (Exception e) {
        	return -1;
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
		int status;
		if(status_list.isEmpty()) status = 3;
		else status = status_list.get(0);
        return status;
	}
	
	public ProfessionalInfo updateRelations(Professional prof)
	{
		EntityManager em = EntityManagerHelper.getEntityManager();
        try {
        	em.getTransaction().begin();
        	prof = em.merge(prof);
        	prof.getRelations1();
        	prof.getRelations2();
        } catch (Exception e) {
        	e.printStackTrace(); 
            System.out.println(e); 
        	return new ProfessionalInfo(null,"DB error");
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return refreshProfile(prof);
	}
	
	public ProfessionalInfo connectProfessional(Professional prof)
	{
		EntityManager em = EntityManagerHelper.getEntityManager();
        try {
        	em.getTransaction().begin();
        	prof = em.merge(prof);
        	prof.getRelations1();
        	prof.getRelations2();
        } catch (Exception e) {
        	e.printStackTrace(); 
            System.out.println(e); 
        	return new ProfessionalInfo(null,"DB error");
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return refreshProfile(prof);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Relation find_relation(Professional prof1, Professional prof2) {
		EntityManager em = EntityManagerHelper.getEntityManager();
		Query query = em.createNamedQuery("Relation.findRelation");
		query.setParameter("prof1",prof1);
		query.setParameter("prof2",prof2);
		List<Relation> rel_list;
		try {
			rel_list = query.getResultList();
		} catch (Exception e) {
        	return null;
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
		return rel_list.get(0);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Message> list_messages(Professional prof1, Professional prof2) {
		EntityManager em = EntityManagerHelper.getEntityManager();
		Query query = em.createNamedQuery("Message.findAllMessages");
		query.setParameter("prof1",prof1);
		query.setParameter("prof2",prof2);
		List<Message> message_list;
		try {
			message_list = query.getResultList();
		} catch (Exception e) {
        	return null;
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return message_list;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<JobOffer> list_available_jobs(Professional prof) {
		EntityManager em = EntityManagerHelper.getEntityManager();
		Query query = em.createNamedQuery("JobOffer.findAvailableJobs");
		query.setParameter("prof",prof);
		List<JobOffer> offers_list;
		try {
			offers_list = query.getResultList();
		} catch (Exception e) {
        	return null;
        } finally {
        	EntityManagerHelper.closeEntityManager();
        }
        return offers_list;
	}

}