package servlets;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import model.Administrator;
import model.Professional;
import dao.AdministratorDAOImpl;
import dao.AdministratorDAO;
import dao.ProfessionalDAOImpl;
import dao.ProfessionalDAO;
import helper.AdministratorInfo;
import helper.XMLBuilder;

/**
 * Servlet implementation class AdministratorServlet
 */
@WebServlet(urlPatterns = {"/AdministratorServlet", "/AdministratorServlet/logout", "/AdministratorServlet/xml"})
public class AdministratorServlet extends HttpServlet
{
	private static final long serialVersionUID = 1L;
	String folderPath = "/home/bill/Desktop/multimedia";
    /**
     * @see HttpServlet#HttpServlet()
     */
    public AdministratorServlet()
    {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
	{
		String requestURI = request.getRequestURI();
		if(requestURI.endsWith("logout"))
		{
			HttpSession session = request.getSession(false);
			if(session != null)
			{
			    session.removeAttribute("admin");
			    session.invalidate();
			}
			response.sendRedirect("/LinkedInClone/AdministratorServlet");
			return;
		}
		
		HttpSession session = request.getSession(true);
	
		Administrator admin = (Administrator) session.getAttribute("admin");
        if (admin != null)
        {
             List<Professional> profs = getAllProfessionals(request, response);
             request.setAttribute("profs", profs);
             RequestDispatcher rd = getServletContext().getRequestDispatcher("/admin/admin_page.jsp");  
             rd.forward(request, response);
        }
        else
        {
        	request.setAttribute("error_message","");
        	RequestDispatcher rd = getServletContext().getRequestDispatcher("/admin/login.jsp");  
            rd.forward(request, response);
        }
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
	{
		 String requestURI = request.getRequestURI();
		 if(requestURI.endsWith("xml"))
    	 {
			 HttpSession session = request.getSession(true);     
			 Administrator admin = (Administrator) session.getAttribute("admin");
			 if(admin != null)
			 {
				 List<Professional> profs = getAllProfessionals(request, response);
	    		 List<Professional> xml_profs = new ArrayList<Professional>();
	    		 for(int i = 0; i < profs.size(); i++)
	    		 {
	    			 if(request.getParameter("prof_" + Integer.toString(profs.get(i).getId())) != null)
	    			 {
	    				 String loop_iter = request.getParameter("iter_" + Integer.toString(profs.get(i).getId()));
	    				 if(request.getParameter("check_" + loop_iter) != null)
	    				 {
	    					 xml_profs.add(profs.get(i));
	    				 }
	    			 }
	    		 }
	    		 downloadAllXML(request,response, xml_profs);       
	             /*request.setAttribute("profs", profs);
	             RequestDispatcher rd = getServletContext().getRequestDispatcher("/admin/admin_page.jsp");  
	             rd.forward(request, response);*/
			 }
			 else
			 {
				 response.sendRedirect("/LinkedInClone/AdministratorServlet");
			 }
    	 }
		 else
		 {
			AdministratorInfo adminInfo = login(request, response);
	        Administrator admin = adminInfo.getAdmin();
	        if (admin != null)
	        {
	        	 List<Professional> profs = getAllProfessionals(request, response);
	             HttpSession session = request.getSession(true);       
	             session.setAttribute("admin",admin);
	             request.setAttribute("profs", profs);
	             RequestDispatcher rd = getServletContext().getRequestDispatcher("/admin/admin_page.jsp");  
	             rd.forward(request, response);
	        }
	        else
	        {
	        	RequestDispatcher rd = getServletContext().getRequestDispatcher("/admin/login.jsp");
	        	request.setAttribute("error_message", adminInfo.getError());
	            rd.forward(request, response);
	        }
		 }
	}
	
	private AdministratorInfo login(HttpServletRequest request,
            HttpServletResponse response)
	{
	 
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        AdministratorDAO dao = new AdministratorDAOImpl();
        return dao.login(email,password);
    }
	
	private List<Professional> getAllProfessionals(HttpServletRequest request,
            HttpServletResponse response)
	{
        ProfessionalDAO dao = new ProfessionalDAOImpl();
		List<Professional> profs = dao.list();
        return profs;
    }
	
	private void downloadAllXML(HttpServletRequest request, HttpServletResponse response, List<Professional> profs) throws IOException
	{
        
		response.setContentType("application/zip");
		response.setHeader("Content-Disposition", "attachment; filename=\"xmlfiles.zip\"");
        
        XMLBuilder xml = new XMLBuilder();
        ZipOutputStream out = null;
        out = new ZipOutputStream(response.getOutputStream());
        File multimedia = new File(folderPath);

        for (Professional prof : profs)
        {
            File file = File.createTempFile("user" + Integer.toString(prof.getId()), ".xml", multimedia);
            Files.write(file.toPath(), xml.createXML(prof).getBytes());
            out.putNextEntry(new ZipEntry(file.getPath()));
            out.closeEntry();
            file.delete();
                
        }

        out.close();
        
	}
}
