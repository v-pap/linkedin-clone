package servlets;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import model.Administrator;
import model.Professional;
import dao.AdministratorDAOImpl;
import dao.AdministratorDAO;
import dao.ProfessionalDAOImpl;
import dao.ProfessionalDAO;
import helper.AdministratorInfo;
import helper.XMLBuilder;

/**
 * Servlet implementation class AdministratorServlet
 */
@WebServlet(urlPatterns = {"/AdministratorServlet", "/AdministratorServlet/logout"})
public class AdministratorServlet extends HttpServlet
{
	private static final long serialVersionUID = 1L;
	private static final int DEFAULT_BUFFER_SIZE = 1024;
	String folderPath = "/home/bill/Desktop/multimedia";
    /**
     * @see HttpServlet#HttpServlet()
     */
    public AdministratorServlet()
    {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
	{
		String requestURI = request.getRequestURI();
		if(requestURI.endsWith("logout"))
		{
			HttpSession session = request.getSession(false);
			if(session != null)
			{
			    session.removeAttribute("admin");
			    session.invalidate();
			}
			response.sendRedirect("/LinkedInClone/AdministratorServlet");
			return;
		}
		
		HttpSession session = request.getSession(true);
	
		Administrator admin = (Administrator) session.getAttribute("admin");
        if (admin != null)
        {
             List<Professional> profs = getAllProfessionals(request, response);
             request.setAttribute("profs", profs);
             RequestDispatcher rd = getServletContext().getRequestDispatcher("/admin/admin_page.jsp");  
             rd.forward(request, response);
        }
        else
        {
        	request.setAttribute("error_message","");
        	RequestDispatcher rd = getServletContext().getRequestDispatcher("/admin/login.jsp");  
            rd.forward(request, response);
        }
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
	{
        AdministratorInfo adminInfo = login(request, response);
        Administrator admin = adminInfo.getAdmin();
        if (admin != null)
        {
        	 String requestURI = request.getRequestURI();
        	 List<Professional> profs = getAllProfessionals(request, response);
        	 
        	 if(requestURI.endsWith("xml"))
        	 {
        		 List<Professional> xml_profs = new ArrayList<Professional>();
        		 for(int i = 0; i < profs.size(); i++)
        		 {
        			 if(request.getParameter("prof_" + Integer.toString(profs.get(i).getId())) != null)
        			 {
        				 String loop_iter = request.getParameter("iter_" + Integer.toString(profs.get(i).getId()));
        				 if(request.getParameter("check_" + loop_iter) != null)
        				 {
        					 xml_profs.add(profs.get(i));
        				 }
        			 }
        		 }
        		 downloadAllXML(request,response, xml_profs);
        	 }
        	 
             HttpSession session = request.getSession(true);       
             session.setAttribute("admin",admin);
             request.setAttribute("profs", profs);
             RequestDispatcher rd = getServletContext().getRequestDispatcher("/admin/admin_page.jsp");  
             rd.forward(request, response);
        }
        else
        {
        	RequestDispatcher rd = getServletContext().getRequestDispatcher("/admin/login.jsp");
        	request.setAttribute("error_message", adminInfo.getError());
            rd.forward(request, response);
        }
	}
	
	private AdministratorInfo login(HttpServletRequest request,
            HttpServletResponse response)
	{
	 
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        AdministratorDAO dao = new AdministratorDAOImpl();
        return dao.login(email,password);
    }
	
	private List<Professional> getAllProfessionals(HttpServletRequest request,
            HttpServletResponse response)
	{
        ProfessionalDAO dao = new ProfessionalDAOImpl();
		List<Professional> profs = dao.list();
        return profs;
    }
	
	private void downloadAllXML(HttpServletRequest request, HttpServletResponse response, List<Professional> profs) throws IOException
	{
        
		response.setContentType("application/zip");
		response.setHeader("Content-Disposition", "attachment; filename=\"xmlfiles.zip\"");
        
        XMLBuilder xml = new XMLBuilder();
        OutputStream out = response.getOutputStream();
        ZipOutputStream output = null;
        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
        
        output = new ZipOutputStream(new BufferedOutputStream(response.getOutputStream(), DEFAULT_BUFFER_SIZE));

        for (Professional prof : profs)
        {
            InputStream input = null;
            File multimedia = new File(folderPath);
            file = File.createTempFile(fileName, ".xmp", multimedia);
            xml.createXML(prof).getBytes()
            output.putNextEntry(new ZipEntry(file.getFileName()));
            file.delete();
            for (int length = 0; (length = input.read(buffer)) > 0;)
            {
                output.write(buffer, 0, length);
            }
                
        	output.closeEntry();
        }
      }
        
        
        response.setContentLength(xml.createXML(user_prof).getBytes().length);
        out.write(xml.createXML(user_prof).getBytes());
        out.close();
	}

}
